{"ast":null,"code":"var _jsxFileName = \"/home/yankee3313/repos/FullStackOpen/part9/patientor/src/components/SoloPatientPage/index.tsx\",\n  _s = $RefreshSig$();\nimport { Gender } from \"../../types\";\nimport MaleIcon from \"@mui/icons-material/Male\";\nimport FemaleIcon from \"@mui/icons-material/Female\";\nimport { useParams } from 'react-router-dom';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst assertNever = value => {\n  throw new Error(`Unhandled discriminated union member: ${JSON.stringify(value)}`);\n};\nconst getHeartColor = rating => {\n  switch (rating) {\n    case 0:\n      return /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n        style: {\n          color: \"green\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 16\n      }, this);\n    case 1:\n      return /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n        style: {\n          color: \"orange\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 16\n      }, this);\n    case 2:\n      return /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n        style: {\n          color: \"red\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 16\n      }, this);\n    default:\n      return /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n        style: {\n          color: \"green\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 16\n      }, this);\n  }\n};\nconst EntryDetails = _ref => {\n  let {\n    entry,\n    diagnoses\n  } = _ref;\n  switch (entry.type) {\n    case \"Hospital\":\n      const hospitalEntry = entry;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Discharge: \", hospitalEntry.discharge.date]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: hospitalEntry.discharge.criteria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }, this);\n    case \"HealthCheck\":\n      const healthCheckEntry = entry;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Health Check Rating: \", getHeartColor(healthCheckEntry.healthCheckRating)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 15\n      }, this);\n    case \"OccupationalHealthcare\":\n      const occupationalEntry = entry;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [entry.diagnosisCodes ? /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: entry.diagnosisCodes.map((code, index) => {\n            const diagnosis = diagnoses.find(d => d.code === code);\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [code, \" - \", diagnosis ? diagnosis.name : \"Diagnosis not found\"]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Employer: \", occupationalEntry.employerName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this), occupationalEntry.sickLeave && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sick Leave Start: \", occupationalEntry.sickLeave.startDate]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sick Leave End: \", occupationalEntry.sickLeave.endDate]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }, this);\n    default:\n      return assertNever(entry);\n  }\n};\n_c = EntryDetails;\nconst SoloPatientPage = _ref2 => {\n  _s();\n  let {\n    patients,\n    diagnoses\n  } = _ref2;\n  const {\n    id\n  } = useParams();\n  const patient = patients.find(p => p.id === id);\n  if (patient) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [patient.name, \" \", patient.gender === Gender.Male ? /*#__PURE__*/_jsxDEV(MaleIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 60\n        }, this) : patient.gender === Gender.Female ? /*#__PURE__*/_jsxDEV(FemaleIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 47\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"ssn: \", patient.ssn]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"occupation: \", patient.occupation]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"entries:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: patient.entries ? patient.entries.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            border: '1px solid black',\n            margin: '5px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [entry.date, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              children: entry.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 28\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(EntryDetails, {\n            entry: entry,\n            diagnoses: diagnoses\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [\"Diagnosis by \", entry.specialist]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 28\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No entries available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Patient not found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this);\n  }\n};\n_s(SoloPatientPage, \"yQgCIz/jJfqV1l9s2yoba81MT5A=\", false, function () {\n  return [useParams];\n});\n_c2 = SoloPatientPage;\nexport default SoloPatientPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"EntryDetails\");\n$RefreshReg$(_c2, \"SoloPatientPage\");","map":{"version":3,"names":["Gender","MaleIcon","FemaleIcon","useParams","FavoriteIcon","assertNever","value","Error","JSON","stringify","getHeartColor","rating","color","EntryDetails","entry","diagnoses","type","hospitalEntry","discharge","date","criteria","healthCheckEntry","healthCheckRating","occupationalEntry","diagnosisCodes","map","code","index","diagnosis","find","d","name","employerName","sickLeave","startDate","endDate","SoloPatientPage","patients","id","patient","p","gender","Male","Female","ssn","occupation","entries","border","margin","description","specialist"],"sources":["/home/yankee3313/repos/FullStackOpen/part9/patientor/src/components/SoloPatientPage/index.tsx"],"sourcesContent":["import { Patient, Gender, BaseEntry, Diagnosis, HospitalEntry, HealthCheckEntry, OccupationalHealthcareEntry } from \"../../types\";\nimport MaleIcon from \"@mui/icons-material/Male\";\nimport FemaleIcon from \"@mui/icons-material/Female\";\nimport { useParams } from 'react-router-dom';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\n\ninterface Props {\n    patients : Patient[]\n    diagnoses: Diagnosis[]\n  }\n\nconst assertNever = (value: never): never => {\n  throw new Error(\n    `Unhandled discriminated union member: ${JSON.stringify(value)}`\n  );\n};\n\nconst getHeartColor = (rating: number): JSX.Element => {\n  switch (rating) {\n      case 0:\n        return <FavoriteIcon style={{ color: \"green\" }} />;\n      case 1:\n        return <FavoriteIcon style={{ color: \"orange\" }} />;\n      case 2:\n        return <FavoriteIcon style={{ color: \"red\" }} />;\n      default:\n        return <FavoriteIcon style={{ color: \"green\" }} />;\n  }\n};\n\nconst EntryDetails: React.FC<{ entry: BaseEntry; diagnoses: Diagnosis[] }> = ({ entry, diagnoses }) => {\n  switch (entry.type) {\n      case \"Hospital\":\n        const hospitalEntry = entry as HospitalEntry;\n          return (\n              <div>\n                <p>Discharge: {hospitalEntry.discharge.date}</p>\n                <p>{hospitalEntry.discharge.criteria}</p>\n              </div>\n          );\n      case \"HealthCheck\":\n        const healthCheckEntry = entry as HealthCheckEntry;\n          return (\n              <div>\n                <p>Health Check Rating: {getHeartColor(healthCheckEntry.healthCheckRating)}</p>\n              </div>\n          );\n      case \"OccupationalHealthcare\":\n        const occupationalEntry = entry as OccupationalHealthcareEntry;\n          return (\n              <div>\n                {entry.diagnosisCodes ? (\n                  <ul>\n                    {entry.diagnosisCodes.map((code: string, index: number) => {\n                        const diagnosis = diagnoses.find(d => d.code === code);\n                        return (\n                            <li key={index}>\n                                {code} - {diagnosis ? diagnosis.name : \"Diagnosis not found\"}\n                            </li>\n                        );\n                    })}\n                  </ul>\n                    ) : (\n                        <p></p>\n                    )}\n                <p>Employer: {occupationalEntry.employerName}</p>\n                  {occupationalEntry.sickLeave && (\n                    <div>\n                      <p>Sick Leave Start: {occupationalEntry.sickLeave.startDate}</p>\n                      <p>Sick Leave End: {occupationalEntry.sickLeave.endDate}</p>\n                    </div>\n                  )}\n              </div>\n          );\n      default:\n        return assertNever(entry);\n  }\n};\n\nconst SoloPatientPage = ({ patients, diagnoses } : Props ) => {\n  const { id } = useParams<{ id: string }>();\n\n  const patient = patients.find(p => p.id === id);\n\n  if (patient) {\n    return (\n      <div>\n        <h1>\n          {patient.name} {patient.gender === Gender.Male ? <MaleIcon /> :\n           patient.gender === Gender.Female ? <FemaleIcon /> : null}\n        </h1>\n        <p>ssn: {patient.ssn}</p>\n        <p>occupation: {patient.occupation}</p>\n        <h1>entries:</h1>        \n        <div>{patient.entries ? (\n                patient.entries.map((entry: BaseEntry, index: number) => (\n                    <div key={index} style={{border: '1px solid black', margin: '5px'}}>\n                        <p>{entry.date}:</p>\n                        <p><i>{entry.description}</i></p>\n                        <EntryDetails entry={entry} diagnoses={diagnoses} />\n                        <p><strong>Diagnosis by {entry.specialist}</strong></p>\n                    </div>\n                ))\n            ) : (\n                <p>No entries available</p>\n            )}\n            </div>\n            </div>\n          )\n  }\n  else {\n    return (\n      <div>\n        <p>Patient not found.</p>\n      </div>\n    );\n  }\n};\n\nexport default SoloPatientPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}