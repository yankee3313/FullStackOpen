{"ast":null,"code":"var _jsxFileName = \"/home/yankee3313/repos/FullStackOpen/part9/patientor/src/components/SoloPatientPage/index.tsx\",\n  _s = $RefreshSig$();\nimport { Gender } from \"../../types\";\nimport MaleIcon from \"@mui/icons-material/Male\";\nimport FemaleIcon from \"@mui/icons-material/Female\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst assertNever = value => {\n  throw new Error(`Unhandled discriminated union member: ${JSON.stringify(value)}`);\n};\nconst EntryDetails = _ref => {\n  let {\n    entry,\n    diagnoses\n  } = _ref;\n  switch (entry.type) {\n    case \"Hospital\":\n      const hospitalEntry = entry;\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 15\n      }, this);\n    case \"HealthCheck\":\n      const healthCheckEntry = entry;\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 15\n      }, this);\n    case \"OccupationalHealthcare\":\n      const occupationalEntry = entry;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [entry.diagnosisCodes ? /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: entry.diagnosisCodes.map((code, index) => {\n            const diagnosis = diagnoses.find(d => d.code === code);\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [code, \" - \", diagnosis ? diagnosis.name : \"Diagnosis not found\"]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Employer: \", occupationalEntry.employerName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this), occupationalEntry.sickLeave && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Sick Leave:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Start: \", occupationalEntry.sickLeave.startDate]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"End: \", occupationalEntry.sickLeave.endDate]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }, this);\n    default:\n      return assertNever(entry);\n  }\n};\n_c = EntryDetails;\nconst SoloPatientPage = _ref2 => {\n  _s();\n  let {\n    patients,\n    diagnoses\n  } = _ref2;\n  const {\n    id\n  } = useParams();\n  const patient = patients.find(p => p.id === id);\n  if (patient) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [patient.name, \" \", patient.gender === Gender.Male ? /*#__PURE__*/_jsxDEV(MaleIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 60\n        }, this) : patient.gender === Gender.Female ? /*#__PURE__*/_jsxDEV(FemaleIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 47\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"ssn: \", patient.ssn]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"occupation: \", patient.occupation]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"entries:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: patient.entries ? patient.entries.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [entry.date, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              children: entry.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 28\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No entries available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Patient not found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this);\n  }\n};\n_s(SoloPatientPage, \"yQgCIz/jJfqV1l9s2yoba81MT5A=\", false, function () {\n  return [useParams];\n});\n_c2 = SoloPatientPage;\nexport default SoloPatientPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"EntryDetails\");\n$RefreshReg$(_c2, \"SoloPatientPage\");","map":{"version":3,"names":["Gender","MaleIcon","FemaleIcon","useParams","assertNever","value","Error","JSON","stringify","EntryDetails","entry","diagnoses","type","hospitalEntry","healthCheckEntry","occupationalEntry","diagnosisCodes","map","code","index","diagnosis","find","d","name","employerName","sickLeave","startDate","endDate","SoloPatientPage","patients","id","patient","p","gender","Male","Female","ssn","occupation","entries","date","description"],"sources":["/home/yankee3313/repos/FullStackOpen/part9/patientor/src/components/SoloPatientPage/index.tsx"],"sourcesContent":["import { Patient, Gender, BaseEntry, Diagnosis } from \"../../types\";\nimport MaleIcon from \"@mui/icons-material/Male\";\nimport FemaleIcon from \"@mui/icons-material/Female\";\nimport { useParams } from 'react-router-dom';\n\ninterface Props {\n    patients : Patient[]\n    diagnoses: Diagnosis[]\n  }\n\nconst assertNever = (value: never): never => {\n  throw new Error(\n    `Unhandled discriminated union member: ${JSON.stringify(value)}`\n  );\n};\n\nconst EntryDetails: React.FC<{ entry: BaseEntry; diagnoses: Diagnosis[] }> = ({ entry, diagnoses }) => {\n  switch (entry.type) {\n      case \"Hospital\":\n        const hospitalEntry = entry as HospitalEntry;\n          return (\n              <div>\n                  {/* Render Hospital Entry details here */}\n              </div>\n          );\n      case \"HealthCheck\":\n        const healthCheckEntry = entry as HealthCheckEntry;\n          return (\n              <div>\n                  {/* Render Health Check Entry details here */}\n              </div>\n          );\n      case \"OccupationalHealthcare\":\n        const occupationalEntry = entry as OccupationalHealthcareEntry;\n          return (\n              <div>\n                  {entry.diagnosisCodes ? (\n                            <ul>\n                            {entry.diagnosisCodes.map((code: string, index: number) => {\n                                const diagnosis = diagnoses.find(d => d.code === code);\n                                return (\n                                    <li key={index}>\n                                        {code} - {diagnosis ? diagnosis.name : \"Diagnosis not found\"}\n                                    </li>\n                                );\n                            })}\n                        </ul>\n\n                        ) : (\n                            <p></p>\n                        )}\n                <p>Employer: {occupationalEntry.employerName}</p>\n                {occupationalEntry.sickLeave && (\n                  <div>\n                    <p>Sick Leave:</p>\n                    <p>Start: {occupationalEntry.sickLeave.startDate}</p>\n                    <p>End: {occupationalEntry.sickLeave.endDate}</p>\n                  </div>\n                )}\n              </div>\n          );\n      default:\n        return assertNever(entry);\n  }\n};\n\nconst SoloPatientPage = ({ patients, diagnoses } : Props ) => {\n  const { id } = useParams<{ id: string }>();\n\n  const patient = patients.find(p => p.id === id);\n\n  if (patient) {\n    return (\n      <div>\n        <h1>\n          {patient.name} {patient.gender === Gender.Male ? <MaleIcon /> :\n           patient.gender === Gender.Female ? <FemaleIcon /> : null}\n        </h1>\n        <p>ssn: {patient.ssn}</p>\n        <p>occupation: {patient.occupation}</p>\n        <h1>entries:</h1>        \n        <div>{patient.entries ? (\n                patient.entries.map((entry: BaseEntry, index: number) => (\n                    <div key={index}>\n                        <p>{entry.date}:</p>\n                        <p><i>{entry.description}</i></p>\n                        \n                    </div>\n                ))\n            ) : (\n                <p>No entries available</p>\n            )}\n            </div>\n            </div>\n          )\n  }\n  else {\n    return (\n      <div>\n        <p>Patient not found.</p>\n      </div>\n    );\n  }\n};\n\nexport default SoloPatientPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}