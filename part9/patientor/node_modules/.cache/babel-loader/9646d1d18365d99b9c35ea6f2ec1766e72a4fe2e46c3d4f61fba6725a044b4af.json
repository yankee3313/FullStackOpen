{"ast":null,"code":"var _jsxFileName = \"/home/yankee3313/repos/FullStackOpen/part9/patientor/src/components/SoloPatientPage/index.tsx\",\n  _s = $RefreshSig$();\nimport { Gender } from \"../../types\";\nimport MaleIcon from \"@mui/icons-material/Male\";\nimport FemaleIcon from \"@mui/icons-material/Female\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SoloPatientPage = _ref => {\n  _s();\n  let {\n    patients\n  } = _ref;\n  const {\n    id\n  } = useParams();\n  const patient = patients.find(p => p.id === id);\n  if (patient) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [patient.name, \" \", patient.gender === Gender.Male ? /*#__PURE__*/_jsxDEV(MaleIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 60\n        }, this) : patient.gender === Gender.Female ? /*#__PURE__*/_jsxDEV(FemaleIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 47\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"ssn: \", patient.ssn]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"occupation: \", patient.occupation]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"entries:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), patient.entries ? patient.entries.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: entry.date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: entry.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 25\n        }, this), entry.diagnosisCodes ? /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: entry.diagnosisCodes.map((code, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: code\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No diagnosis codes available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No entries available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Patient not found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }\n};\n_s(SoloPatientPage, \"yQgCIz/jJfqV1l9s2yoba81MT5A=\", false, function () {\n  return [useParams];\n});\n_c = SoloPatientPage;\nexport default SoloPatientPage;\nvar _c;\n$RefreshReg$(_c, \"SoloPatientPage\");","map":{"version":3,"names":["Gender","MaleIcon","FemaleIcon","useParams","SoloPatientPage","patients","id","patient","find","p","name","gender","Male","Female","ssn","occupation","entries","map","entry","index","date","description","diagnosisCodes","code"],"sources":["/home/yankee3313/repos/FullStackOpen/part9/patientor/src/components/SoloPatientPage/index.tsx"],"sourcesContent":["import { Patient, Gender, BaseEntry } from \"../../types\";\nimport MaleIcon from \"@mui/icons-material/Male\";\nimport FemaleIcon from \"@mui/icons-material/Female\";\nimport { useParams } from 'react-router-dom';\n\ninterface Props {\n    patients : Patient[]\n  }\n\nconst SoloPatientPage = ({ patients } : Props ) => {\n  const { id } = useParams<{ id: string }>();\n\n  const patient = patients.find(p => p.id === id);\n\n  if (patient) {\n    return (\n      <div>\n        <h1>\n          {patient.name} {patient.gender === Gender.Male ? <MaleIcon /> :\n           patient.gender === Gender.Female ? <FemaleIcon /> : null}\n        </h1>\n        <p>ssn: {patient.ssn}</p>\n        <p>occupation: {patient.occupation}</p>\n        <h1>entries:</h1>        \n        {patient.entries ? (\n                patient.entries.map((entry: BaseEntry, index: number) => (\n                    <div key={index}>\n                        <p>{entry.date}</p>\n                        <p>{entry.description}</p>\n                        {entry.diagnosisCodes ? (\n                            <ul>\n                                {entry.diagnosisCodes.map((code: string, index: number) => (\n                                    <li key={index}>{code}</li>\n                                ))}\n                            </ul>\n                        ) : (\n                            <p>No diagnosis codes available</p>\n                        )}\n                    </div>\n                ))\n            ) : (\n                <p>No entries available</p>\n            )}\n            </div>\n          )\n}\n  else {\n    return (\n      <div>\n        <p>Patient not found.</p>\n      </div>\n    );\n  }\n};\n\nexport default SoloPatientPage;"],"mappings":";;AAAA,SAAkBA,MAAM,QAAmB,aAAa;AACxD,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,UAAU,MAAM,4BAA4B;AACnD,SAASC,SAAS,QAAQ,kBAAkB;AAAC;AAM7C,MAAMC,eAAe,GAAG,QAA2B;EAAA;EAAA,IAA1B;IAAEC;EAAiB,CAAC;EAC3C,MAAM;IAAEC;EAAG,CAAC,GAAGH,SAAS,EAAkB;EAE1C,MAAMI,OAAO,GAAGF,QAAQ,CAACG,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAC;EAE/C,IAAIC,OAAO,EAAE;IACX,oBACE;MAAA,wBACE;QAAA,WACGA,OAAO,CAACG,IAAI,EAAC,GAAC,EAACH,OAAO,CAACI,MAAM,KAAKX,MAAM,CAACY,IAAI,gBAAG,QAAC,QAAQ;UAAA;UAAA;UAAA;QAAA,QAAG,GAC5DL,OAAO,CAACI,MAAM,KAAKX,MAAM,CAACa,MAAM,gBAAG,QAAC,UAAU;UAAA;UAAA;UAAA;QAAA,QAAG,GAAG,IAAI;MAAA;QAAA;QAAA;QAAA;MAAA,QACtD,eACL;QAAA,WAAG,OAAK,EAACN,OAAO,CAACO,GAAG;MAAA;QAAA;QAAA;QAAA;MAAA,QAAK,eACzB;QAAA,WAAG,cAAY,EAACP,OAAO,CAACQ,UAAU;MAAA;QAAA;QAAA;QAAA;MAAA,QAAK,eACvC;QAAA,UAAI;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAK,EAChBR,OAAO,CAACS,OAAO,GACRT,OAAO,CAACS,OAAO,CAACC,GAAG,CAAC,CAACC,KAAgB,EAAEC,KAAa,kBAChD;QAAA,wBACI;UAAA,UAAID,KAAK,CAACE;QAAI;UAAA;UAAA;UAAA;QAAA,QAAK,eACnB;UAAA,UAAIF,KAAK,CAACG;QAAW;UAAA;UAAA;UAAA;QAAA,QAAK,EACzBH,KAAK,CAACI,cAAc,gBACjB;UAAA,UACKJ,KAAK,CAACI,cAAc,CAACL,GAAG,CAAC,CAACM,IAAY,EAAEJ,KAAa,kBAClD;YAAA,UAAiBI;UAAI,GAAZJ,KAAK;YAAA;YAAA;YAAA;UAAA,QACjB;QAAC;UAAA;UAAA;UAAA;QAAA,QACD,gBAEL;UAAA,UAAG;QAA4B;UAAA;UAAA;UAAA;QAAA,QAClC;MAAA,GAXKA,KAAK;QAAA;QAAA;QAAA;MAAA,QAalB,CAAC,gBAEF;QAAA,UAAG;MAAoB;QAAA;QAAA;QAAA;MAAA,QAC1B;IAAA;MAAA;MAAA;MAAA;IAAA,QACK;EAElB,CAAC,MACM;IACH,oBACE;MAAA,uBACE;QAAA,UAAG;MAAkB;QAAA;QAAA;QAAA;MAAA;IAAI;MAAA;MAAA;MAAA;IAAA,QACrB;EAEV;AACF,CAAC;AAAC,GA5CIf,eAAe;EAAA,QACJD,SAAS;AAAA;AAAA,KADpBC,eAAe;AA8CrB,eAAeA,eAAe;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}