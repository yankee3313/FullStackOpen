{"ast":null,"code":"var _jsxFileName = \"/home/yankee3313/repos/FullStackOpen/part9/patientor/src/components/SoloPatientPage/index.tsx\",\n  _s = $RefreshSig$();\nimport { Gender } from \"../../types\";\nimport MaleIcon from \"@mui/icons-material/Male\";\nimport FemaleIcon from \"@mui/icons-material/Female\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SoloPatientPage = _ref => {\n  _s();\n  let {\n    patients,\n    diagnoses\n  } = _ref;\n  const {\n    id\n  } = useParams();\n  const patient = patients.find(p => p.id === id);\n  if (patient) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [patient.name, \" \", patient.gender === Gender.Male ? /*#__PURE__*/_jsxDEV(MaleIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 60\n        }, this) : patient.gender === Gender.Female ? /*#__PURE__*/_jsxDEV(FemaleIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 47\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"ssn: \", patient.ssn]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"occupation: \", patient.occupation]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"entries:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: patient.entries ? patient.entries.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [entry.date, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              children: entry.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 28\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 25\n          }, this), entry.diagnosisCodes ? /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: entry.diagnosisCodes.map((code, index) => {\n              const diagnosis = diagnoses.find(d => d.code === code);\n              return /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [code, \" - \", diagnosis ? diagnosis.name : \"Diagnosis not found\"]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No entries available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Patient not found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  }\n};\n_s(SoloPatientPage, \"yQgCIz/jJfqV1l9s2yoba81MT5A=\", false, function () {\n  return [useParams];\n});\n_c = SoloPatientPage;\nexport default SoloPatientPage;\nvar _c;\n$RefreshReg$(_c, \"SoloPatientPage\");","map":{"version":3,"names":["Gender","MaleIcon","FemaleIcon","useParams","SoloPatientPage","patients","diagnoses","id","patient","find","p","name","gender","Male","Female","ssn","occupation","entries","map","entry","index","date","description","diagnosisCodes","code","diagnosis","d"],"sources":["/home/yankee3313/repos/FullStackOpen/part9/patientor/src/components/SoloPatientPage/index.tsx"],"sourcesContent":["import { Patient, Gender, BaseEntry, Diagnosis } from \"../../types\";\nimport MaleIcon from \"@mui/icons-material/Male\";\nimport FemaleIcon from \"@mui/icons-material/Female\";\nimport { useParams } from 'react-router-dom';\n\ninterface Props {\n    patients : Patient[]\n    diagnoses: Diagnosis[]\n  }\n\nconst SoloPatientPage = ({ patients, diagnoses } : Props ) => {\n  const { id } = useParams<{ id: string }>();\n\n  const patient = patients.find(p => p.id === id);\n\n  if (patient) {\n    return (\n      <div>\n        <h1>\n          {patient.name} {patient.gender === Gender.Male ? <MaleIcon /> :\n           patient.gender === Gender.Female ? <FemaleIcon /> : null}\n        </h1>\n        <p>ssn: {patient.ssn}</p>\n        <p>occupation: {patient.occupation}</p>\n        <h1>entries:</h1>        \n        <div>{patient.entries ? (\n                patient.entries.map((entry: BaseEntry, index: number) => (\n                    <div key={index}>\n                        <p>{entry.date}:</p>\n                        <p><i>{entry.description}</i></p>\n                        {entry.diagnosisCodes ? (\n                            <ul>\n                            {entry.diagnosisCodes.map((code: string, index: number) => {\n                                const diagnosis = diagnoses.find(d => d.code === code);\n                                return (\n                                    <li key={index}>\n                                        {code} - {diagnosis ? diagnosis.name : \"Diagnosis not found\"}\n                                    </li>\n                                );\n                            })}\n                        </ul>\n\n                        ) : (\n                            <p></p>\n                        )}\n                    </div>\n                ))\n            ) : (\n                <p>No entries available</p>\n            )}\n            </div>\n            </div>\n          )\n  }\n  else {\n    return (\n      <div>\n        <p>Patient not found.</p>\n      </div>\n    );\n  }\n};\n\nexport default SoloPatientPage;"],"mappings":";;AAAA,SAAkBA,MAAM,QAA8B,aAAa;AACnE,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,UAAU,MAAM,4BAA4B;AACnD,SAASC,SAAS,QAAQ,kBAAkB;AAAC;AAO7C,MAAMC,eAAe,GAAG,QAAsC;EAAA;EAAA,IAArC;IAAEC,QAAQ;IAAEC;EAAkB,CAAC;EACtD,MAAM;IAAEC;EAAG,CAAC,GAAGJ,SAAS,EAAkB;EAE1C,MAAMK,OAAO,GAAGH,QAAQ,CAACI,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAC;EAE/C,IAAIC,OAAO,EAAE;IACX,oBACE;MAAA,wBACE;QAAA,WACGA,OAAO,CAACG,IAAI,EAAC,GAAC,EAACH,OAAO,CAACI,MAAM,KAAKZ,MAAM,CAACa,IAAI,gBAAG,QAAC,QAAQ;UAAA;UAAA;UAAA;QAAA,QAAG,GAC5DL,OAAO,CAACI,MAAM,KAAKZ,MAAM,CAACc,MAAM,gBAAG,QAAC,UAAU;UAAA;UAAA;UAAA;QAAA,QAAG,GAAG,IAAI;MAAA;QAAA;QAAA;QAAA;MAAA,QACtD,eACL;QAAA,WAAG,OAAK,EAACN,OAAO,CAACO,GAAG;MAAA;QAAA;QAAA;QAAA;MAAA,QAAK,eACzB;QAAA,WAAG,cAAY,EAACP,OAAO,CAACQ,UAAU;MAAA;QAAA;QAAA;QAAA;MAAA,QAAK,eACvC;QAAA,UAAI;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAK,eACjB;QAAA,UAAMR,OAAO,CAACS,OAAO,GACbT,OAAO,CAACS,OAAO,CAACC,GAAG,CAAC,CAACC,KAAgB,EAAEC,KAAa,kBAChD;UAAA,wBACI;YAAA,WAAID,KAAK,CAACE,IAAI,EAAC,GAAC;UAAA;YAAA;YAAA;YAAA;UAAA,QAAI,eACpB;YAAA,uBAAG;cAAA,UAAIF,KAAK,CAACG;YAAW;cAAA;cAAA;cAAA;YAAA;UAAK;YAAA;YAAA;YAAA;UAAA,QAAI,EAChCH,KAAK,CAACI,cAAc,gBACjB;YAAA,UACCJ,KAAK,CAACI,cAAc,CAACL,GAAG,CAAC,CAACM,IAAY,EAAEJ,KAAa,KAAK;cACvD,MAAMK,SAAS,GAAGnB,SAAS,CAACG,IAAI,CAACiB,CAAC,IAAIA,CAAC,CAACF,IAAI,KAAKA,IAAI,CAAC;cACtD,oBACI;gBAAA,WACKA,IAAI,EAAC,KAAG,EAACC,SAAS,GAAGA,SAAS,CAACd,IAAI,GAAG,qBAAqB;cAAA,GADvDS,KAAK;gBAAA;gBAAA;gBAAA;cAAA,QAET;YAEb,CAAC;UAAC;YAAA;YAAA;YAAA;UAAA,QACD,gBAGD;YAAA;YAAA;YAAA;UAAA,QACH;QAAA,GAjBKA,KAAK;UAAA;UAAA;UAAA;QAAA,QAmBlB,CAAC,gBAEF;UAAA,UAAG;QAAoB;UAAA;UAAA;UAAA;QAAA;MAC1B;QAAA;QAAA;QAAA;MAAA,QACK;IAAA;MAAA;MAAA;MAAA;IAAA,QACA;EAEhB,CAAC,MACI;IACH,oBACE;MAAA,uBACE;QAAA,UAAG;MAAkB;QAAA;QAAA;QAAA;MAAA;IAAI;MAAA;MAAA;MAAA;IAAA,QACrB;EAEV;AACF,CAAC;AAAC,GAnDIhB,eAAe;EAAA,QACJD,SAAS;AAAA;AAAA,KADpBC,eAAe;AAqDrB,eAAeA,eAAe;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}